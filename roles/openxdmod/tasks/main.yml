---

 - name: install prerequisites
   yum: 
     name: "{{ item }}"
     state: installed
   with_items:
     - "cronie"
     - "gmp-devel"
     - "httpd"
     - "java-1.7.0-openjdk"
     - "java-1.7.0-openjdk-devel"
     - "logrotate"
     - "mariadb"
     - "mariadb-server"
     - "MySQL-python"
     - "php"
     - "php-cli"
     - "php-gd"
     - "php-gmp"
     - "php-mcrypt"
     - "php-mysql"
     - "php-pdo"
     - "php-pear-Log"
     - "php-pear-MDB2"
     - "php-pear-MDB2-Driver-mysql"
     - "php-xml"
     - "php-mbstring"
     - "php-pecl-apcu"
     - "bzip2"
     - "python-pip"
     - "libreoffice"
     - "perl-Image-ExifTool"
     - "jq" 
     - "librsvg2-tools"
     - "chromium-headless"

 - name: upgrade pip
   command: "{{ item }}"
   with_items:
   - pip install -U pip
   - pip install pexpect

 - name: get phantomJS
   unarchive: src="https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2" dest="/tmp/" remote_src=yes

 - name: install phantomJS
   copy: src="/tmp/phantomjs-2.1.1-linux-x86_64/bin/phantomjs" dest="/usr/local/bin/phantomjs" owner=root group=root mode=0755 remote_src=yes
   
 - name: get timezone
   shell: timedatectl status | grep 'Time zone:' | awk '{print $3}'
   register: php_parsable_timezone

 - debug:
     var: php_parsable_timezone

 - name: set php timezone
   lineinfile: 
     path: /etc/php.ini
     regexp: "^;date.timezone"
     line: 'date.timezone=({{ item }})'
     state: present
   with_items:
     - "{{ php_parsable_timezone.stdout_lines }}"

 - name: install openxdmod rpm from github
   yum: name="{{ xdmod_url }}" state=installed #"for vim syntax highlighting...

 - name: ensure mariadb is running
   service: name=mariadb state=started enabled=yes

 - name: xdmod httpd conf
   template: src=xdmod.conf dest=/etc/httpd/conf.d/xdmod.conf

 - name: xdmod portal settings template
   template: src=portal_settings.ini.j2 dest=/etc/xdmod/portal_settings.ini

 - name: xdmod resources template
   template: src=resources.json.j2 dest=/etc/xdmod/resources.json

 - name: xdmod resource specs template
   template: src=resource_specs.json.j2 dest=/etc/xdmod/resource_specs.json

 - name: xdmod organization template
   template: src=organization.json.j2 dest=/etc/xdmod/organization.json

 - name: xdmod auto update template
   template: src=update_check.json.j2 dest=/etc/xdmod/update_check.json

 - name: copy script that extracts the individual chart configurations which can be added to roles.json for modifying the default charts in the dashboard
   copy:
     src: extract_chart_configs.php
     dest: /usr/share/xdmod/tools/dev/extract_chart_configs.php
     mode: '0744'

#Need to initialize databases still
 - name: initialize xdmod databases
   mysql_db:
     name: "{{ item | basename | regex_replace('.sql','') }}"
     state: import
     target: "{{ item }}"
   with_fileglob:
     - /usr/share/xdmod/db/schema/*
     - /usr/share/xdmod/db/data/*

 - name: create db user
   mysql_user:
     name: "xdmod"
     password: "{{ xdmod_db_pass }}"
     priv: "mod_hpcdb.*:ALL/mod_logger.*:ALL/mod_shredder.*:ALL/moddb.*:ALL/modw.*:ALL/modw_aggregates.*:ALL/modw_filters.*:ALL"
     state: present

 - name: populate xdmod databases with tables
   command: /usr/share/xdmod/tools/etl/etl_overseer.php -p {{ item }}
   loop: 
     - xdmod.hpcdb-bootstrap
     - xdmod.jobs-xdw-bootstrap
     - xdmod.shredder-bootstrap
     - xdmod.staging-bootstrap
     - xdmod.xdb-bootstrap
     #- xdmod.xdw-bootstrap-storage

 - name: initialize acls
   command: acl-xdmod-management
   when: xdmod_version is version('8.0.0', operator='<=', strict=True)
 
 - name: config acls
   command: acl-config

 - name: import acls
   command: acl-import
   when: xdmod_version is version('8.0.0', operator='<=', strict=True)

 - name: Import hierarchy CSV into XDMOD
   command: xdmod-import-csv -t hierarchy -i {{ hierarchy_file_path }}
   when: hierarchy_file_path is defined and hierarchy_file_path != ""

 - name: Provide a mapping from your user groups to the hierarchy items
   command: xdmod-import-csv -t group-to-hierarchy -i {{ group_to_hierarchy_file_path }}
   when: group_to_hierarchy_file_path is defined and group_to_hierarchy_file_path != ""

 - name: Run ingestor to ingest hierarchies into the tables
   command: xdmod-ingestor --last-modified-start-date "{{ ansible_date_time.date }}" 

 - name: shred slurm records
   command: "xdmod-shredder -r {{ slurm_cluster_name }} -f slurm -i {{ sacct_log_file_path }}" 

 - name: ingest slurm records
   command: xdmod-ingestor

 - name: create xdmod shred cron job
   cron:
     hour: 0
     minute: 10
     state: present
     job: "sacct --allusers --parsable2 --noheader --allocations --duplicates --clusters {{ slurm_cluster_name }} --format jobid,jobidraw,cluster,partition,account,group,gid,user,uid,submit,eligible,start,end,elapsed,exitcode,state,nnodes,ncpus,reqcpus,reqmem,reqtres,alloctres,timelimit,nodelist,jobname --starttime {{ xdmod_shredder_start_time }} --end-time {{ xdmod_shredder_end_time }} > {{ sacct_log_file_path }} && xdmod-shredder -r {{ slurm_cluster_name }} -f slurm -i {{ sacct_log_file_path }}"
   when: enable_supremm == false

 - name: create xdmod ingestor cron job
   cron:
     hour: 0
     minute: 30
     state: present
     job: "xdmod-ingestor --start-date {{ xdmod_ingestor_start_date }} --end-date {{ xdmod_ingestor_end_date }}"
   when: enable_supremm == false

 - name: reload httpd
   service: name=httpd state=restarted enabled=yes

